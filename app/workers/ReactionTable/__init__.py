import logging
import azure.functions as func

import json
from typing import List

from .helpers.smiles_processor import list_reactants_and_products
from .services.compound import CompoundService
from .models.dto import ReactionTable, Metadata, CompoundType, Compound


def main(req: func.HttpRequest) -> func.HttpResponse:
    """
    A function that processes smiles generated by the Ketcher or MarvinJS editor and generates data for the reaction table.

    Args:
        req: HTTP request with parameters:
            - reactants: Reactants in the reaction.
            - products: Products in the reaction.
            - reactionSmiles: Reaction SMILES string.

    Returns:
        ReactionTable: Data for the reaction table.
    """
    reactants = req.params.get("reactants")
    products = req.params.get("products")
    smiles = req.params.get("smiles")

    if not reactants or not products or not smiles:
        logging.error("Missing required parameter")
        return _error_response("Missing required parameter")

    reactants_smiles, products_smiles = list_reactants_and_products(
        reactants, products, smiles
    )
    logging.info(f"Reactants SMILES: {reactants_smiles}")
    logging.info(f"Products SMILES: {products_smiles}")

    service = CompoundService()

    reactants_data: List[Compound] = []
    products_data: List[Compound] = []

    try:
        reactants_data = service.list_by_smiles(reactants_smiles, CompoundType.REACTANT)
        logging.info(f"Number of reactants: {len(reactants_data)}")

        products_data = service.list_by_smiles(products_smiles, CompoundType.PRODUCT)
        logging.info(f"Number of products: {len(products_data)}")

    except Exception as e:
        logging.error(f"Error processing compounds: {e}")
        return _error_response(f"Error processing compounds: {e}")

    reaction_table = ReactionTable(
        compounds=reactants_data + products_data,
        metadata=Metadata(
            number_of_reactants=len(reactants_data),
            number_of_products=len(products_data),
        ),
    )

    return func.HttpResponse(
        body=json.dumps(reaction_table),
        mimetype="application/json",
        status_code=200,
    )


def _error_response(error: str) -> func.HttpResponse:
    return func.HttpResponse(
        body=json.dumps({"error": error}),
        mimetype="application/json",
        status_code=400,
    )
